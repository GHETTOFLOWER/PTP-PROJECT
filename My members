"""
SMART INVENTORY MANAGEMENT SYSTEM
for Small Retail Shops
- Add/update items
- Check low stock levels
- Save/Load data to JSON file
- Generate basic reports
"""

import json
import os

# File to store inventory data
INVENTORY_FILE = "inventory.json"

def load_inventory():
    """Load inventory data from JSON file or return empty list if file doesn't exist"""
    if os.path.exists(INVENTORY_FILE):
        with open(INVENTORY_FILE, 'r') as file:
            return json.load(file)
    return []

def save_inventory(inventory):
    """Save inventory data to JSON file"""
    with open(INVENTORY_FILE, 'w') as file:
        json.dump(inventory, file, indent=4)

def add_item(inventory):
    """Add a new item to inventory"""
    print("\n--- ADD NEW ITEM ---")
    name = input("Item name: ").strip()
    
    # Check if item already exists
    for item in inventory:
        if item['name'].lower() == name.lower():
            print(f"Item '{name}' already exists! Use update option instead.")
            return
    
    try:
        quantity = int(input("Current quantity: "))
        price = float(input("Price per unit: "))
        threshold = int(input("Low stock threshold: "))
        
        inventory.append({
            'name': name,
            'quantity': quantity,
            'price': price,
            'threshold': threshold
        })
        save_inventory(inventory)
        print(f"'{name}' added successfully!")
    except ValueError:
        print("Invalid input! Please enter numbers for quantity/price/threshold.")

def update_stock(inventory):
    """Update quantity of existing item"""
    print("\n--- UPDATE ITEM STOCK ---")
    name = input("Enter item name: ").strip()
    
    for item in inventory:
        if item['name'].lower() == name.lower():
            try:
                change = int(input(f"Enter quantity change (+/-) for '{name}': "))
                item['quantity'] += change
                save_inventory(inventory)
                
                if item['quantity'] < 0:
                    item['quantity'] = 0
                    print("Warning: Quantity set to 0 (cannot be negative)")
                
                print(f"Updated '{name}'. New quantity: {item['quantity']}")
                return
            except ValueError:
                print("Invalid input! Please enter a whole number.")
                return
    
    print(f"Item '{name}' not found!")

def check_low_stock(inventory):
    """Identify items below their threshold"""
    print("\n--- LOW STOCK ALERTS ---")
    low_stock_items = [item for item in inventory if item['quantity'] < item['threshold']]
    
    if not low_stock_items:
        print("No items below threshold!")
        return
    
    for item in low_stock_items:
        print(f"{item['name']}: {item['quantity']} (Threshold: {item['threshold']})")

def generate_report(inventory):
    """Display inventory summary report"""
    print("\n--- INVENTORY REPORT ---")
    print(f"Total items: {len(inventory)}")
    
    if not inventory:
        print("No items in inventory!")
        return
    
    # Calculate total inventory value
    total_value = sum(item['quantity'] * item['price'] for item in inventory)
    print(f"Total inventory value: ${total_value:.2f}")
    
    # Display all items
    print("\nItem Details:")
    print("{:<20} {:<10} {:<10} {:<10}".format("Name", "Quantity", "Price", "Threshold"))
    for item in inventory:
        print("{:<20} {:<10} {:<10.2f} {:<10}".format(
            item['name'], item['quantity'], item['price'], item['threshold']))

def delete_item(inventory):
    """Delete an item from the inventory"""
    print("\n--- DELETE ITEM ---")
    name = input("Enter the name of the item to delete: ").strip()
    
    for item in inventory:
        if item['name'].lower() == name.lower():
            inventory.remove(item)
            save_inventory(inventory)
            print(f"Item '{name}' has been deleted successfully!")
            return
    
    print(f"Item '{name}' not found!")

def record_sale(inventory):
    """Record a sale and calculate sales in UGX"""
    print("\n--- RECORD SALE ---")
    name = input("Enter the name of the item sold: ").strip()
    
    for item in inventory:
        if item['name'].lower() == name.lower():
            try:
                quantity_sold = int(input(f"Enter quantity sold for '{name}': "))
                
                if quantity_sold > item['quantity']:
                    print(f"Not enough stock! Available quantity: {item['quantity']}")
                    return
                
                item['quantity'] -= quantity_sold
                sales_ugx = quantity_sold * item['price'] * 3700  # Assuming 1 USD = 3700 UGX
                item['sales'] = item.get('sales', 0) + sales_ugx
                
                save_inventory(inventory)
                print(f"Sale recorded! Total sales for '{name}': UGX {item['sales']:.2f}")
                return
            except ValueError:
                print("Invalid input! Please enter a whole number.")
                return
    
    print(f"Item '{name}' not found!")

def main_menu():
    """Display main menu and handle user input"""
    inventory = load_inventory()
    
    while True:
        print("\n=== INVENTORY MANAGEMENT SYSTEM ===")
        print("1. Add New Item")
        print("2. Update Item Stock")
        print("3. Check Low Stock")
        print("4. Generate Report")
        print("5. Delete Item")
        print("6. Record Sale")
        print("7. Exit")
        
        choice = input("Enter your choice (1-7): ")
        
        if choice == '1':
            add_item(inventory)
        elif choice == '2':
            update_stock(inventory)
        elif choice == '3':
            check_low_stock(inventory)
        elif choice == '4':
            generate_report(inventory)
        elif choice == '5':
            delete_item(inventory)
        elif choice == '6':
            record_sale(inventory)
        elif choice == '7':
            print("Exiting system. Goodbye!")
            break
        else:
            print("Invalid choice! Please enter 1-7.")

if __name__ == "__main__":
    main_menu()